from openai import OpenAI
import os
import json
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
openai_api_key = os.getenv('OPENAI_API_KEY')

gpt_model = "gpt-4o-mini"

if openai_api_key:
    print(f"OpenAI API Key exists and begins with {openai_api_key[:8]}")
else:
    print("OpenAI API Key not set")
    exit(1)

# Initialize OpenAI client
client = OpenAI(api_key=openai_api_key)

def generate_fictional_data():
    """
    Function to generate fictional data using the OpenAI API
    """
    prompt = "Generate 10 fictional records for the Coelho table in valid JSON format with the fields: id_rabbit, age, name, gender, breed, lineage. Ensure the response is a JSON array."
    
    try:
        completion = client.chat.completions.create(
            model=gpt_model,
            messages=[{"role": "system", "content": "You generate realistic fictional data in JSON format. Ensure valid JSON output."},
                      {"role": "user", "content": prompt}]
        )
        response_content = completion.choices[0].message.content.strip()
        
        # Ensure response is valid JSON
        if response_content.startswith("{") or response_content.startswith("["):
            return json.loads(response_content)
        else:
            print("Unexpected response format from OpenAI API:", response_content)
            return None
    except json.JSONDecodeError:
        print("Error: OpenAI API did not return valid JSON.")
        return None
    except Exception as e:
        print(f"Error calling GPT: {e}")
        return None

def main():
    """
    Main function to generate and display fictional data
    """
    print("Generating fictional data...")
    data = generate_fictional_data()
    
    if data:
        print(json.dumps(data, indent=4))
    else:
        print("Failed to generate fictional data.")

if __name__ == "__main__":
    main()
